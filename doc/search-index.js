var N=null,E="",T="t",U="u",searchIndex={};
var R=["pollopt","insert","remove","Removes all options represented by `other` from `self`.","contains","Returns true if `self` is a superset of `other`.","ready","readable","writable","interests","is_readable","is_writable","registry","duration","result","is_empty","tcpstream","socketaddr","shutdown","option","tcplistener","local_addr","try_clone","Creates a new independently owned handle to the underlying…","Sets the value for the `IP_TTL` option on this socket.","Gets the value of the `IP_TTL` option for this socket.","take_error","Get the value of the `SO_ERROR` option on this socket.","udpsocket","set_ttl","ipv4addr","ipv6addr","Sends data on the socket to the address previously bound…","A collection of readiness events.","register","reregister","deregister","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","mio::event","into_iter","mio::unix","mio::net","unixready","ordering","partial_cmp","sub_assign","bitor_assign","formatter","as_raw_fd","into_raw_fd","from_raw_fd","readiness","Interests","Registry","Registration","SetReadiness","TcpStream","TcpListener","UdpSocket","EventedFd","UnixReady"];

searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on…","i":[[3,R[59],"mio","Interests used in registering.",N,N],[3,"PollOpt",E,"Options supplied when registering an `Evented` handle with…",N,N],[3,"Ready",E,"A set of readiness event kinds",N,N],[3,"Poll",E,"Polls for readiness events on all registered values.",N,N],[3,R[61],E,"Handle to a user space `Poll` registration.",N,N],[3,R[60],E,"Registers I/O resources.",N,N],[3,R[62],E,"Updates the readiness state of the associated…",N,N],[3,"Token",E,"Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0",E,E,0,N],[3,"Events",E,R[33],N,N],[11,"empty",E,"Return a `PollOpt` representing no set options.",1,[[],[R[0]]]],[11,"edge",E,"Return a `PollOpt` representing edge-triggered…",1,[[],[R[0]]]],[11,"level",E,"Return a `PollOpt` representing level-triggered…",1,[[],[R[0]]]],[11,"oneshot",E,"Return a `PollOpt` representing oneshot notifications.",1,[[],[R[0]]]],[11,"is_edge",E,"Returns true if the options include edge-triggered…",1,[[["self"]],["bool"]]],[11,"is_level",E,"Returns true if the options include level-triggered…",1,[[["self"]],["bool"]]],[11,"is_oneshot",E,"Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,R[4],E,R[5],1,[[["self"],[R[0]]],["bool"]]],[11,R[1],E,"Adds all options represented by `other` into `self`.",1,[[["self"],[R[0]]]]],[11,R[2],E,R[3],1,[[["self"],[R[0]]]]],[11,"empty",E,"Returns the empty `Ready` set.",2,[[],[R[6]]]],[11,R[7],E,"Returns a `Ready` representing readable readiness.",2,[[],[R[6]]]],[11,R[8],E,"Returns a `Ready` representing writable readiness.",2,[[],[R[6]]]],[11,R[15],E,"Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,R[10],E,"Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,R[11],E,"Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,R[1],E,"Adds all readiness represented by `other` into `self`.",2,[[["self"],[T]]]],[11,R[2],E,R[3],2,[[["self"],[T]]]],[11,R[4],E,R[5],2,[[["self"],[T]],["bool"]]],[11,"from_usize",E,"Create a `Ready` instance using the given `usize`…",2,[[["usize"]],[R[6]]]],[11,"as_usize",E,"Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,R[7],E,"Returns `Interests` representing readable readiness.",3,[[],[R[9]]]],[11,R[8],E,"Returns `Interests` representing writable readiness.",3,[[],[R[9]]]],[11,R[10],E,"Returns true if the value includes readable readiness.",3,[[["self"]],["bool"]]],[11,R[11],E,"Returns true if the value includes writable readiness.",3,[[["self"]],["bool"]]],[11,"new",E,"Return a new `Poll` handle.",4,[[],[R[14],["poll"]]]],[11,R[12],E,"Return a reference to the associated `Registry`.",4,[[["self"]],[R[12]]]],[11,"poll",E,"Wait for readiness events",4,[[["self"],["events"],[R[19],[R[13]]]],[R[14],["usize"]]]],[11,"poll_interruptible",E,"Like `poll`, but may be interrupted by a signal",4,[[["self"],["events"],[R[19],[R[13]]]],[R[14],["usize"]]]],[11,R[34],E,"Register an `Evented` handle with the `Poll` instance.",5,[[["self"],["e"],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,"Re-register an `Evented` handle with the `Poll` instance.",5,[[["self"],["e"],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,"Deregister an `Evented` handle with the `Poll` instance.",5,[[["self"],["e"]],[R[14]]]],[11,"with_capacity",E,"Return a new `Events` capable of holding up to `capacity`…",6,[[["usize"]],["events"]]],[11,"capacity",E,"Returns the number of `Event` values that `self` can hold.",6,[[["self"]],["usize"]]],[11,R[15],E,"Returns `true` if `self` contains no `Event` values.",6,[[["self"]],["bool"]]],[11,"iter",E,"Returns an iterator over the `Event` values.",6,[[["self"]],["iter"]]],[11,"clear",E,"Clearing all `Event` values from container explicitly.",6,[[["self"]]]],[11,"new",E,"Create and return a new `Registration` and the associated…",7,N],[11,R[58],E,"Returns the registration's current readiness.",8,[[["self"]],[R[6]]]],[11,"set_readiness",E,"Set the registration's readiness",8,[[["self"],[R[6]]],[R[14]]]],[0,"net",E,"Networking primitives",N,N],[3,R[64],R[48],"A structure representing a socket server",N,N],[3,R[63],E,"A non-blocking TCP stream between a local socket and a…",N,N],[3,R[65],E,"A User Datagram Protocol socket.",N,N],[11,"connect",E,"Create a new TCP stream and issue a non-blocking connect…",9,[[[R[17]]],[R[14],[R[16]]]]],[11,"connect_stream",E,"Creates a new `TcpStream` from the pending socket inside…",9,[[[R[16]],[R[17]]],[R[14],[R[16]]]]],[11,"from_stream",E,"Creates a new `TcpStream` from a standard `net::TcpStream`.",9,[[[R[16]]],[R[14],[R[16]]]]],[11,"peer_addr",E,"Returns the socket address of the remote peer of this TCP…",9,[[["self"]],[R[14],[R[17]]]]],[11,R[21],E,"Returns the socket address of the local half of this TCP…",9,[[["self"]],[R[14],[R[17]]]]],[11,R[22],E,R[23],9,[[["self"]],[R[14],[R[16]]]]],[11,R[18],E,"Shuts down the read, write, or both halves of this…",9,[[["self"],[R[18]]],[R[14]]]],[11,"set_nodelay",E,"Sets the value of the `TCP_NODELAY` option on this socket.",9,[[["self"],["bool"]],[R[14]]]],[11,"nodelay",E,"Gets the value of the `TCP_NODELAY` option on this socket.",9,[[["self"]],[R[14],["bool"]]]],[11,"set_recv_buffer_size",E,"Sets the value of the `SO_RCVBUF` option on this socket.",9,[[["self"],["usize"]],[R[14]]]],[11,"recv_buffer_size",E,"Gets the value of the `SO_RCVBUF` option on this socket.",9,[[["self"]],[R[14],["usize"]]]],[11,"set_send_buffer_size",E,"Sets the value of the `SO_SNDBUF` option on this socket.",9,[[["self"],["usize"]],[R[14]]]],[11,"send_buffer_size",E,"Gets the value of the `SO_SNDBUF` option on this socket.",9,[[["self"]],[R[14],["usize"]]]],[11,"set_keepalive",E,"Sets whether keepalive messages are enabled to be sent on…",9,[[["self"],[R[19],[R[13]]]],[R[14]]]],[11,"keepalive",E,"Returns whether keepalive messages are enabled on this…",9,[[["self"]],[R[14],[R[19]]]]],[11,R[29],E,R[24],9,[[["self"],["u32"]],[R[14]]]],[11,"ttl",E,R[25],9,[[["self"]],[R[14],["u32"]]]],[11,"set_linger",E,"Sets the value for the `SO_LINGER` option on this socket.",9,[[["self"],[R[19],[R[13]]]],[R[14]]]],[11,"linger",E,"Gets the value of the `SO_LINGER` option on this socket.",9,[[["self"]],[R[14],[R[19]]]]],[11,R[26],E,R[27],9,[[["self"]],[R[14],[R[19]]]]],[11,"peek",E,"Receives data on the socket from the remote address to…",9,N],[11,"read_bufs",E,"Read in a list of buffers all at once.",9,N],[11,"write_bufs",E,"Write a list of buffers all at once.",9,N],[11,"bind",E,"Convenience method to bind a new TCP listener to the…",10,[[[R[17]]],[R[14],[R[20]]]]],[11,"from_std",E,"Creates a new `TcpListener` from an instance of a…",10,[[[R[20]]],[R[14],[R[20]]]]],[11,"accept",E,"Accepts a new `TcpStream`.",10,[[["self"]],[R[14]]]],[11,"accept_std",E,"Accepts a new `std::net::TcpStream`.",10,[[["self"]],[R[14]]]],[11,R[21],E,"Returns the local socket address of this listener.",10,[[["self"]],[R[14],[R[17]]]]],[11,R[22],E,R[23],10,[[["self"]],[R[14],[R[20]]]]],[11,R[29],E,R[24],10,[[["self"],["u32"]],[R[14]]]],[11,"ttl",E,R[25],10,[[["self"]],[R[14],["u32"]]]],[11,R[26],E,R[27],10,[[["self"]],[R[14],[R[19]]]]],[11,"bind",E,"Creates a UDP socket from the given address.",11,[[[R[17]]],[R[14],[R[28]]]]],[11,"from_socket",E,"Creates a new mio-wrapped socket from an underlying and…",11,[[[R[28]]],[R[14],[R[28]]]]],[11,R[21],E,"Returns the socket address that this socket was created…",11,[[["self"]],[R[14],[R[17]]]]],[11,R[22],E,R[23],11,[[["self"]],[R[14],[R[28]]]]],[11,"send_to",E,"Sends data on the socket to the given address. On success,…",11,N],[11,"recv_from",E,"Receives data from the socket. On success, returns the…",11,N],[11,"send",E,R[32],11,N],[11,"recv",E,"Receives data from the socket previously bound with…",11,N],[11,"connect",E,"Connects the UDP socket setting the default destination…",11,[[["self"],[R[17]]],[R[14]]]],[11,"set_broadcast",E,"Sets the value of the `SO_BROADCAST` option for this socket.",11,[[["self"],["bool"]],[R[14]]]],[11,"broadcast",E,"Gets the value of the `SO_BROADCAST` option for this socket.",11,[[["self"]],[R[14],["bool"]]]],[11,"set_multicast_loop_v4",E,"Sets the value of the `IP_MULTICAST_LOOP` option for this…",11,[[["self"],["bool"]],[R[14]]]],[11,"multicast_loop_v4",E,"Gets the value of the `IP_MULTICAST_LOOP` option for this…",11,[[["self"]],[R[14],["bool"]]]],[11,"set_multicast_ttl_v4",E,"Sets the value of the `IP_MULTICAST_TTL` option for this…",11,[[["self"],["u32"]],[R[14]]]],[11,"multicast_ttl_v4",E,"Gets the value of the `IP_MULTICAST_TTL` option for this…",11,[[["self"]],[R[14],["u32"]]]],[11,"set_multicast_loop_v6",E,"Sets the value of the `IPV6_MULTICAST_LOOP` option for…",11,[[["self"],["bool"]],[R[14]]]],[11,"multicast_loop_v6",E,"Gets the value of the `IPV6_MULTICAST_LOOP` option for…",11,[[["self"]],[R[14],["bool"]]]],[11,R[29],E,R[24],11,[[["self"],["u32"]],[R[14]]]],[11,"ttl",E,R[25],11,[[["self"]],[R[14],["u32"]]]],[11,"join_multicast_v4",E,"Executes an operation of the `IP_ADD_MEMBERSHIP` type.",11,[[["self"],[R[30]],[R[30]]],[R[14]]]],[11,"join_multicast_v6",E,"Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",11,[[["self"],[R[31]],["u32"]],[R[14]]]],[11,"leave_multicast_v4",E,"Executes an operation of the `IP_DROP_MEMBERSHIP` type.",11,[[["self"],[R[30]],[R[30]]],[R[14]]]],[11,"leave_multicast_v6",E,"Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",11,[[["self"],[R[31]],["u32"]],[R[14]]]],[11,"set_only_v6",E,"Sets the value for the `IPV6_V6ONLY` option on this socket.",11,[[["self"],["bool"]],[R[14]]]],[11,"only_v6",E,"Gets the value of the `IPV6_V6ONLY` option for this socket.",11,[[["self"]],[R[14],["bool"]]]],[11,R[26],E,R[27],11,[[["self"]],[R[14],[R[19]]]]],[11,"recv_bufs",E,"Receives a single datagram message socket previously bound…",11,N],[11,"send_bufs",E,R[32],11,N],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Event",R[45],"An readiness event returned by [`Poll::poll`].",N,N],[3,"Events",E,R[33],N,N],[3,"Iter",E,"[`Events`] iterator.",N,N],[8,"Evented",E,"A value that may be registered with `Registry`",N,N],[10,R[34],E,"Register `self` with the given `Registry` instance.",12,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[10,R[35],E,"Re-register `self` with the given `Registry` instance.",12,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[10,R[36],E,"Deregister `self` from the given `Registry` instance",12,[[["self"],[R[12]]],[R[14]]]],[0,"unix","mio","Unix only extensions",N,N],[3,R[67],R[47],"Unix specific extensions to `Ready`",N,N],[3,R[66],E,"Adapter for [`RawFd`] providing an [`Evented`]…",N,N],[12,"0",E,E,13,N],[11,"from","mio",E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[37],E,E,3,[[["self"]],[T]]],[11,R[38],E,E,3,N],[11,R[39],E,E,3,[[[U]],[R[14]]]],[11,R[43],E,E,3,[[["self"]],[T]]],[11,R[42],E,E,3,[[["self"]],[R[44]]]],[11,R[40],E,E,3,[[["self"]],[T]]],[11,R[41],E,E,3,[[["self"]],[R[14]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[37],E,E,1,[[["self"]],[T]]],[11,R[38],E,E,1,N],[11,R[39],E,E,1,[[[U]],[R[14]]]],[11,R[43],E,E,1,[[["self"]],[T]]],[11,R[42],E,E,1,[[["self"]],[R[44]]]],[11,R[40],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[R[14]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[37],E,E,2,[[["self"]],[T]]],[11,R[38],E,E,2,N],[11,R[39],E,E,2,[[[U]],[R[14]]]],[11,R[43],E,E,2,[[["self"]],[T]]],[11,R[42],E,E,2,[[["self"]],[R[44]]]],[11,R[40],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[R[14]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[39],E,E,4,[[[U]],[R[14]]]],[11,R[43],E,E,4,[[["self"]],[T]]],[11,R[42],E,E,4,[[["self"]],[R[44]]]],[11,R[40],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[["self"]],[R[14]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[39],E,E,7,[[[U]],[R[14]]]],[11,R[43],E,E,7,[[["self"]],[T]]],[11,R[42],E,E,7,[[["self"]],[R[44]]]],[11,R[40],E,E,7,[[["self"]],[T]]],[11,R[41],E,E,7,[[["self"]],[R[14]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[37],E,E,5,[[["self"]],[T]]],[11,R[38],E,E,5,N],[11,R[39],E,E,5,[[[U]],[R[14]]]],[11,R[43],E,E,5,[[["self"]],[T]]],[11,R[42],E,E,5,[[["self"]],[R[44]]]],[11,R[40],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[["self"]],[R[14]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[37],E,E,8,[[["self"]],[T]]],[11,R[38],E,E,8,N],[11,R[39],E,E,8,[[[U]],[R[14]]]],[11,R[43],E,E,8,[[["self"]],[T]]],[11,R[42],E,E,8,[[["self"]],[R[44]]]],[11,R[40],E,E,8,[[["self"]],[T]]],[11,R[41],E,E,8,[[["self"]],[R[14]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[37],E,E,0,[[["self"]],[T]]],[11,R[38],E,E,0,N],[11,R[39],E,E,0,[[[U]],[R[14]]]],[11,R[43],E,E,0,[[["self"]],[T]]],[11,R[42],E,E,0,[[["self"]],[R[44]]]],[11,R[40],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[R[14]]]],[11,R[46],E,E,6,[[["self"]],["i"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[39],E,E,6,[[[U]],[R[14]]]],[11,R[43],E,E,6,[[["self"]],[T]]],[11,R[42],E,E,6,[[["self"]],[R[44]]]],[11,R[40],E,E,6,[[["self"]],[T]]],[11,R[41],E,E,6,[[["self"]],[R[14]]]],[11,"from",R[45],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[37],E,E,14,[[["self"]],[T]]],[11,R[38],E,E,14,N],[11,R[39],E,E,14,[[[U]],[R[14]]]],[11,R[43],E,E,14,[[["self"]],[T]]],[11,R[42],E,E,14,[[["self"]],[R[44]]]],[11,R[40],E,E,14,[[["self"]],[T]]],[11,R[41],E,E,14,[[["self"]],[R[14]]]],[11,R[46],E,E,15,[[["self"]],["i"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[37],E,E,15,[[["self"]],[T]]],[11,R[38],E,E,15,N],[11,R[39],E,E,15,[[[U]],[R[14]]]],[11,R[43],E,E,15,[[["self"]],[T]]],[11,R[42],E,E,15,[[["self"]],[R[44]]]],[11,R[40],E,E,15,[[["self"]],[T]]],[11,R[41],E,E,15,[[["self"]],[R[14]]]],[11,"from",R[47],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[39],E,E,13,[[[U]],[R[14]]]],[11,R[43],E,E,13,[[["self"]],[T]]],[11,R[42],E,E,13,[[["self"]],[R[44]]]],[11,R[40],E,E,13,[[["self"]],[T]]],[11,R[41],E,E,13,[[["self"]],[R[14]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[37],E,E,16,[[["self"]],[T]]],[11,R[38],E,E,16,N],[11,R[39],E,E,16,[[[U]],[R[14]]]],[11,R[43],E,E,16,[[["self"]],[T]]],[11,R[42],E,E,16,[[["self"]],[R[44]]]],[11,R[40],E,E,16,[[["self"]],[T]]],[11,R[41],E,E,16,[[["self"]],[R[14]]]],[11,"from",R[48],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[39],E,E,10,[[[U]],[R[14]]]],[11,R[43],E,E,10,[[["self"]],[T]]],[11,R[42],E,E,10,[[["self"]],[R[44]]]],[11,R[40],E,E,10,[[["self"]],[T]]],[11,R[41],E,E,10,[[["self"]],[R[14]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[39],E,E,9,[[[U]],[R[14]]]],[11,R[43],E,E,9,[[["self"]],[T]]],[11,R[42],E,E,9,[[["self"]],[R[44]]]],[11,R[40],E,E,9,[[["self"]],[T]]],[11,R[41],E,E,9,[[["self"]],[R[14]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[39],E,E,11,[[[U]],[R[14]]]],[11,R[43],E,E,11,[[["self"]],[T]]],[11,R[42],E,E,11,[[["self"]],[R[44]]]],[11,R[40],E,E,11,[[["self"]],[T]]],[11,R[41],E,E,11,[[["self"]],[R[14]]]],[11,R[34],"mio",E,7,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,E,7,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,E,7,[[["self"],[R[12]]],[R[14]]]],[11,R[34],R[47],E,13,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,E,13,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,E,13,[[["self"],[R[12]]],[R[14]]]],[11,R[34],R[48],E,9,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,E,9,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,E,9,[[["self"],[R[12]]],[R[14]]]],[11,R[34],E,E,10,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,E,10,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,E,10,[[["self"],[R[12]]],[R[14]]]],[11,R[34],E,E,11,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[35],E,E,11,[[["self"],[R[12]],["token"],[R[9]],[R[0]]],[R[14]]]],[11,R[36],E,E,11,[[["self"],[R[12]]],[R[14]]]],[11,"next",R[45],E,15,[[["self"]],[R[19],["event"]]]],[11,"eq","mio",E,1,[[["self"],[R[0]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"eq",R[45],E,14,[[["self"],["event"]],["bool"]]],[11,"ne",E,E,14,[[["self"],["event"]],["bool"]]],[11,"eq",R[47],E,16,[[["self"],[R[49]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[49]]],["bool"]]],[11,"eq","mio",E,0,[[["self"],["token"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["token"]],["bool"]]],[11,R[46],E,E,6,N],[11,"cmp",E,E,1,[[["self"],[R[0]]],[R[50]]]],[11,"cmp",E,E,2,[[["self"],[R[6]]],[R[50]]]],[11,"cmp",E,E,3,[[["self"],[R[9]]],[R[50]]]],[11,"cmp",R[47],E,16,[[["self"],[R[49]]],[R[50]]]],[11,"cmp","mio",E,0,[[["self"],["token"]],[R[50]]]],[11,"clone",E,E,1,[[["self"]],[R[0]]]],[11,"clone",E,E,2,[[["self"]],[R[6]]]],[11,"clone",E,E,3,[[["self"]],[R[9]]]],[11,"clone",R[45],E,14,[[["self"]],["event"]]],[11,"clone","mio",E,5,[[["self"]],[R[12]]]],[11,"clone",E,E,8,[[["self"]],["setreadiness"]]],[11,"clone",R[45],E,15,[[["self"]],["iter"]]],[11,"clone",R[47],E,16,[[["self"]],[R[49]]]],[11,"clone","mio",E,0,[[["self"]],["token"]]],[11,"from",R[47],E,16,[[[R[6]]],[R[49]]]],[11,"from","mio",E,2,[[[R[49]]],[R[6]]]],[11,"from",E,E,0,[[["usize"]],["token"]]],[11,"drop",E,E,7,[[["self"]]]],[11,R[51],E,E,1,[[["self"],[R[0]]],[R[19],[R[50]]]]],[11,"lt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[0]]],["bool"]]],[11,R[51],E,E,2,[[["self"],[R[6]]],[R[19],[R[50]]]]],[11,"lt",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,"le",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,"gt",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,"ge",E,E,2,[[["self"],[R[6]]],["bool"]]],[11,R[51],E,E,3,[[["self"],[R[9]]],[R[19],[R[50]]]]],[11,"lt",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"le",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"gt",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"ge",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,R[51],R[47],E,16,[[["self"],[R[49]]],[R[19],[R[50]]]]],[11,"lt",E,E,16,[[["self"],[R[49]]],["bool"]]],[11,"le",E,E,16,[[["self"],[R[49]]],["bool"]]],[11,"gt",E,E,16,[[["self"],[R[49]]],["bool"]]],[11,"ge",E,E,16,[[["self"],[R[49]]],["bool"]]],[11,R[51],"mio",E,0,[[["self"],["token"]],[R[19],[R[50]]]]],[11,"lt",E,E,0,[[["self"],["token"]],["bool"]]],[11,"le",E,E,0,[[["self"],["token"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["token"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["token"]],["bool"]]],[11,"deref",R[47],E,16,[[["self"]],[R[6]]]],[11,"hash","mio",E,0,N],[11,"sub",E,E,1,[[["self"],[R[0]]],[R[0]]]],[11,"sub",E,E,2,[[["self"],[T]],[R[6]]]],[11,"sub",E,E,3,[[["self"],["self"]],["self"]]],[11,"sub",R[47],E,16,[[["self"],[R[49]]],[R[49]]]],[11,R[52],"mio",E,2,[[["self"],[T]]]],[11,R[52],E,E,3,[[["self"],["self"]]]],[11,"bitand",E,E,1,[[["self"],[R[0]]],[R[0]]]],[11,"bitand",E,E,2,[[["self"],[T]],[R[6]]]],[11,"bitand",R[47],E,16,[[["self"],[R[49]]],[R[49]]]],[11,"bitor","mio",E,1,[[["self"],[R[0]]],[R[0]]]],[11,"bitor",E,E,2,[[["self"],[T]],[R[6]]]],[11,"bitor",E,E,3,[[["self"],["self"]],["self"]]],[11,"bitor",R[47],E,16,[[["self"],[R[49]]],[R[49]]]],[11,"bitxor","mio",E,1,[[["self"],[R[0]]],[R[0]]]],[11,"bitxor",E,E,2,[[["self"],[T]],[R[6]]]],[11,"bitxor",R[47],E,16,[[["self"],[R[49]]],[R[49]]]],[11,"bitand_assign","mio",E,2,[[["self"],[T]]]],[11,R[53],E,E,2,[[["self"],[T]]]],[11,R[53],E,E,3,[[["self"],["self"]]]],[11,"bitxor_assign",E,E,2,[[["self"],[T]]]],[11,"deref_mut",R[47],E,16,[[["self"]],[R[6]]]],[11,"fmt","mio",E,1,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,2,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,3,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",R[45],E,14,[[["self"],[R[54]]],[R[14]]]],[11,"fmt","mio",E,4,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,5,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",R[45],E,15,[[["self"],[R[54]]],[R[14]]]],[11,"fmt","mio",E,6,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,7,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,8,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",R[47],E,13,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,16,[[["self"],[R[54]]],[R[14]]]],[11,"fmt","mio",E,0,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",R[48],E,9,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,10,[[["self"],[R[54]]],[R[14]]]],[11,"fmt",E,E,11,[[["self"],[R[54]]],[R[14]]]],[11,"read",E,E,9,N],[11,"write",E,E,9,N],[11,"flush",E,E,9,[[["self"]],[R[14]]]],[11,R[55],"mio",E,4,[[["self"]],["rawfd"]]],[11,R[55],R[48],E,9,[[["self"]],["rawfd"]]],[11,R[55],E,E,10,[[["self"]],["rawfd"]]],[11,R[55],E,E,11,[[["self"]],["rawfd"]]],[11,R[56],E,E,9,[[["self"]],["rawfd"]]],[11,R[56],E,E,10,[[["self"]],["rawfd"]]],[11,R[56],E,E,11,[[["self"]],["rawfd"]]],[11,R[57],E,E,9,[[["rawfd"]],[R[16]]]],[11,R[57],E,E,10,[[["rawfd"]],[R[20]]]],[11,R[57],E,E,11,[[["rawfd"]],[R[28]]]],[11,"new",R[45],"Creates a new `Event` containing `readiness` and `token`",14,[[[R[6]],["token"]],["event"]]],[11,R[58],E,"Returns the event's readiness.",14,[[["self"]],[R[6]]]],[11,"token",E,"Returns the event's token.",14,[[["self"]],["token"]]],[11,"error",R[47],"Returns a `Ready` representing error readiness.",16,[[],[R[49]]]],[11,"hup",E,"Returns a `Ready` representing HUP readiness.",16,[[],[R[49]]]],[11,"priority",E,"Returns a `Ready` representing priority (`EPOLLPRI`)…",16,[[],[R[49]]]],[11,"is_error",E,"Returns true if the value includes error readiness",16,[[["self"]],["bool"]]],[11,"is_hup",E,"Returns true if the value includes HUP readiness",16,[[["self"]],["bool"]]],[11,"is_priority",E,"Returns true if `Ready` contains priority (`EPOLLPRI`)…",16,[[["self"]],["bool"]]]],"p":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,R[59]],[3,"Poll"],[3,R[60]],[3,"Events"],[3,R[61]],[3,R[62]],[3,R[63]],[3,R[64]],[3,R[65]],[8,"Evented"],[3,R[66]],[3,"Event"],[3,"Iter"],[3,R[67]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);